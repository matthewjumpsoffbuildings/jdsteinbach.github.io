<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James Steinbach</title>
  <subtitle>Front-end architect. Speaker & writer. Sass, CSS animation, RWD & WP.</subtitle>
  <link href="https://jdsteinbach.com/feed.xml" rel="self"/>
  <link href="https://jdsteinbach.com"/>
  <updated>2018-02-01T00:00:00-07:00</updated>
  <id>https://jdsteinbach.com</id>
  <author>
    <name>James Steinbach</name>
    <email>jdsteinbach@gmail.com</email>
  </author>
  <entry>
    <title>Writing Your First PostCSS Plugin</title>
    <link href="https://jdsteinbach.com/css/postcss-plugin/"/>
    <updated>2018-02-01T00:00:00-07:00</updated>
    <id>https://jdsteinbach.com/css/postcss-plugin/</id>
    <content type="html"><p>Read my article “<a href="https://dockyard.com/blog/2018/02/01/writing-your-first-postcss-plugin" title="Writing Your First PostCSS Plugin" target="_blank">Writing Your First PostCSS Plugin</a>” at DockYard.com.</p>
</content>
  </entry>
  <entry>
    <title>Animating Background Gradients to Make Your PWA More Native</title>
    <link href="https://jdsteinbach.com/css/animating-gradients/"/>
    <updated>2017-10-16T00:00:00-06:00</updated>
    <id>https://jdsteinbach.com/css/animating-gradients/</id>
    <content type="html"><p>Read my article “<a href="https://dockyard.com/blog/2017/10/17/animating-background-gradients-pwa" title="Animating Background Gradients to Make Your PWA More Native" target="_blank">Animating Background Gradients to Make Your PWA More Native</a>” at DockYard.com.</p>
</content>
  </entry>
  <entry>
    <title>Distributed Mentoring</title>
    <link href="https://jdsteinbach.com/misc/distributed-mentoring/"/>
    <updated>2017-06-24T00:00:00-06:00</updated>
    <id>https://jdsteinbach.com/misc/distributed-mentoring/</id>
    <content type="html"><p>When most people think about mentoring, they picture someone more experienced investing time in a close relationship with someone less experienced. Maybe you thought about someone who'd done that for you - a co-worker, parent, or teacher. In my web development career, I've had a different kind of mentoring experience than that standard one. Instead of having an experienced developer invest lots of time in me and my career, I've benefited from little bits of help from lots of people over the years. <strong>I like to call this &quot;distributed&quot; mentorship: remote learning from people around the world.</strong></p>
<h2>Getting Started</h2>
<p>About 10 years ago, I got started in web development as a hobby. I was in grad school (studying an entirely unrelated field) and managed to have &quot;free time&quot; one semester. My dad had built a few sites back in the 90s and I liked computers so I thought it would be fun to learn how to build a site. My roommate was studying computer science and I asked him how to build a site. He was working on software development, so he just laughed and showed me w3schools. (Yeah, I know NOW not to go there, but hey, I learned a few things from it back then!) I got more direction from a friend David (who was a sysadmin). He wasn't an &quot;expert&quot; at front-end development, but he was more familiar with it. He gave me a piece of fantastic advice: &quot;most websites are built with tables, but CSS is the new thing that cutting-edge sites are using, so start there and forget tables.&quot;</p>
<p>I remember the new things back then: learning HTML, figuring out that PHP let me have variables and logic, installing IIS &amp; then Apache on my XP laptop, exploring CSS, being mystified that Chrome and Firefox had different default margins on text elements. Most of those ups &amp; downs were part of the standard learning curve for front-end devs back then. Through this time, I didn't really have a &quot;mentor&quot; like we usually think of them. David and I had plenty more conversations - he ended up being my hosting service for years and I learned a lot from him. I remember sitting across the table from him at a bagel place while he drew DNS / hosting diagrams on a napkin. I still really enjoy digging into server admin stuff so I'm grateful for what I learned from him.</p>
<p>Within a year or so of getting experienced with front-end dev, I realized people would probably pay me money for this &quot;hobby.&quot; So I started telling friends what I could do and built a few small paid sites on the side.</p>
<h2>The Weird Lull</h2>
<p>After I graduated I got a job maintaining a website for a small non-profit (and running activities for their events every month and a host of other things: it was very much an &quot;everyone helps with everything&quot; kind of organization). I was given a privately developed CMS with no documentation and little to no positive help from the guy who'd built it. I learned a lot that year, but it was more visual design from the organization's graphic design team - I was pretty isolated as the only &quot;web person.&quot; A year later, I moved on having learned very little: a bit of JavaScript and &quot;never try to edit an undocumented code base.&quot;</p>
<h2>A Real Job, Almost</h2>
<p>After that, I moved back to my college town for more grad school (nope, still not studying dev/tech <code>¯\_(ツ)_/¯</code>) and got a job as a graduate assistant running a ZenCart site. I'd been getting more familiar with PHP by using WordPress so that much of the code wasn't too difficult. What was more challenging was the dozen or so custom MySQL queries I used to handle reporting every quarter. The site was a small MP3 store, so we reported sales to the original artists and paid their licensing fees to the license holders on any tracks they covered from another artist. The worst queries took up more than a page in Word (yep, that's where everything was stored when I arrived). Since then, I've forgotten most of that, but that was also a great year for me - I sold my first few Wordpress sites to some clients and settled solidly on WP as a starting point for client work. There were some fun customizations: mp3 storage &amp; playback (before MediaElement.JS was part of WP) and PayPal integration (price &amp; SKU custom fields, no plugins), but nothing that I'd consider &quot;advanced&quot; today.</p>
<p>During this time, I didn't have a &quot;mentor&quot; <em>per se</em>. I learned a lot from the developer who handed off that ZenCart installation to me - he was kind enough to stay close for support questions for a few months. By now, though, I was relying on a growing network of <strong>distributed mentors</strong>: devs I followed on Twitter and trustworthy publisher. I'd become an avid follower of <a href="https://css-tricks.com/">CSS-Tricks</a>, <a href="https://alistapart.com/">A List Apart</a>, and <a href="http://www.smashingmagazine.com/">Smashing Mag</a>. I didn't personally meet people like Chris Coyier, Eric Meyer, Jeffrey Zeldman, Andrew Clarke, or Vitaly Freidman, but I read their posts &amp; books and &quot;got mentored&quot; by them from a distance.</p>
<p>During this time I started to realize that not every mentorship is an in-person relationship over a long period of time. There are times I've looked back and wondered, &quot;who was my mentor during this phase?&quot; and come up blank - until I stop to remember how much I owe to the developers who write and publish and share their knowledge across the web.</p>
<h2>A Real Job, For Real</h2>
<p>A few more years of freelance work went by while I finished up that degree. Then after graduating again, I got hired at my first <em>real</em> developer job. Not &quot;a small part of my workload&quot; development or &quot;part-time for a college,&quot; but real-live, full-time, development-only work.</p>
<p>By this time, Ethan Marcotte and his magical media queries had changed my CSS world, and shortly into this job, I swallowed my pride (&quot;but my CSS is good enough already!&quot;) and learned Sass. I got pretty proficient at jQuery and was picking up bits of the plain JS that lived beneath it. I was cranking out custom WordPress themes every month or so and loving it. I was the only developer there (it was a <em>small</em> agency), so there wasn't much &quot;in-person&quot; mentoring. However that year I got to attend CSSDevConf (my first dev conference!) and came away amazed. I got to meet some of the devs who had been my &quot;publishing mentors&quot; to that point (hey, Chris &amp; Estelle!) and I met several more devs whose work I started following &amp; learning from immediately (lookin' at you, Rachel, Micah, &amp; Winston). I discovered CSS animation that weekend and immediately started adding pizzazz to the sites I was working on.</p>
<p>Conference mentors are another useful kind of distributed mentor too. I didn't know them at all before then, but Micah Godbolt and Winston Hearn took time to answer my questions about their talks. I got to sit by Chris Coyier, Tab Atkins, and Estelle Weyl one meal, and chat with Jonathan Snook over appetizers one evening. These brief interactions may not seem like very much on their own, but for me, they were really powerful. To realize that these experts were normal people who provide helpful advice and have friendly conversations with a newbie developer was tremendously encouraging.</p>
<h2>A Big Job</h2>
<p>I've talked to a lot of developers whose careers have started similarly: learn/freelance, take a real job, then learn so much in your first year that your next job is a massive jump up. That's what happened. I got an offer to join a team of a dozen developers at a larger agency. This was my first experience working with a significant in-person team. It was exciting to see how our individual strengths and weaknesses quickly moved us into collaborative mentorships. I inherited several bloated CSS-framework-based sites and helped the team move forward into lighter, more customizable Sass workflows. I learned the basics of Angular and Ember from devs with more JS experience than I had.</p>
<h2>Staying Home</h2>
<p>A year later, I took a job with a remote company. The challenges of learning remote work were balanced by a lot of positives: the team had an established workflow, people were already communicating well in Slack &amp; the PM app, and the dev team was internal (so we worked with our own marketing and design departments, instead of reporting to external clients). The same collaborative pattern was at work there too: we had a dev who was our PHP expert, one who was the JS guru, one who knew the company history and business model well, and a CSS/Sass expert (me). We learned from each other well. Again, it didn't feel like &quot;traditional&quot; mentorship. Depending on the topic and context, each of us played the role of mentor or mentee at one time or another. And again, since the whole team was remote, this was another form of distributed mentorship. It was a fantastic team to be part of for 2 years.</p>
<h2>Flying Solo (for now)</h2>
<p>This spring, I shifted positions again: it took a few months for things to settle, but I'm a contractor/consultant right now. I've been working as a team lead with a company that manages a flexible crew of contractors for web/software development and that's been exciting. Having great onboarding/training conversations, constructive code reviews, and teaching moments with junior and intermediate developers has been enjoyable and fulfilling. I'm currently working with a friend to build a company that incorporates both top-notch web app development and training / apprenticeship opportunities for new devs.</p>
<h2>Take-Aways</h2>
<p>I've benefited a lot from &quot;distributed mentoring.&quot; Twitter people, online publishers, conference speakers &amp; friends, co-workers and peers - they've all played important roles in my career, even though it hasn't looked like a stereotypical mentorship.</p>
<p>If you're starting your journey as a developer, start building a good network of people whose tweets/posts/blogs/work you can follow online and learn from remotely. Also, it can be a tough investment to swing, but attending conferences is a huge help, especially in your first couple years of &quot;full-time&quot; development work.</p>
<p>If you've gotten enough experience to start specializing in a particular language, stack, or framework, use that expertise to grow collaboratively with others. Don't get stuck behind fear that you're &quot;not expert enough yet&quot; - if you know just a couple things that a friend or peer doesn't, you can help them along. And of course, stay friends with people who know at least a little more than you about some topics so they can help you along.</p>
</content>
  </entry>
  <entry>
    <title>Keeping RWD Simple & Sassy – Animation</title>
    <link href="https://jdsteinbach.com/sass/rwd-sass-animation/"/>
    <updated>2016-04-14T00:00:00-06:00</updated>
    <id>https://jdsteinbach.com/sass/rwd-sass-animation/</id>
    <content type="html"><p>This is the fifth &amp; final post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some useful techniques for managing responsive animations with Sass.</p>
<h2>Responsive Animations</h2>
<p>Complex animations may need to move differently at different breakpoints. The only way to use different animations at different breakpoints is to define multiple <code>@keyframes</code> animations and use a media query on the animated selector to change the <code>animation-name</code> at the appropriate breakpoints.</p>
<p>Before we get into some useful Sass techniques to help manage responsive animations, let's talk about a few things you should <strong>not</strong> be doing with Sass.</p>
<p>Do not use Sass mixins for browser prefixes. I know, you can still find dozens of articles claiming that browser prefixes are a &quot;must-use&quot; Sass technique. Use <a href="http://jds.li/autoprefix">Autoprefixer instead</a>. If you're using Sass, there's a pretty high likelihood you're using a task runner (Gulp, Grunt, Brocolli, npm scripts) to automate your workflow. Add Autoprefixer to it and just write spec CSS. It will add all the prefixes you need.</p>
<p>Also, try to avoid using Sass maps to store CSS property-value pairs. Sure, you <em>can</em> do that, but Sass mixins provide a much better way to store reusable property-value pairs. As I see it, writing big nested Sass maps that hold all your keyframes data in them isn't ideal. Unless you need to manipulate the values, putting repeated CSS in a mixin is better than in a map as key-value pairs.</p>
<p>So how can Sass help with responsive animations? There are two kinds of animations and two ways Sass can make them more maintainable.</p>
<h3>Unique Animations</h3>
<p>If your animations are detailed and unique (not reusable), you can use a Sass mixin to nest your animation code right inside the selector that uses that animation.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token keyword">@mixin</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property"><span class="token variable">$name</span></span><span class="token punctuation">:</span> <span class="token function">unique-id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token property">animation-name</span><span class="token punctuation">:</span> <span class="token variable">$name</span><span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token atrule"><span class="token rule">@at-root</span></span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token atrule"><span class="token rule">@keyframes</span> <span class="token variable">#{$name}</span></span> <span class="token punctuation">{</span></div><div class="highlight-line">      <span class="token keyword">@content</span><span class="token punctuation">;</span></div><div class="highlight-line">    <span class="token punctuation">}</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token selector">.animated-thing </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token selector">animate </span><span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token selector">0%, 100% </span><span class="token punctuation">{</span></div><div class="highlight-line">      <span class="token property">transform</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></div><div class="highlight-line">    <span class="token punctuation">}</span></div><div class="highlight-line">    <span class="token selector">50% </span><span class="token punctuation">{</span></div><div class="highlight-line">      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">    <span class="token punctuation">}</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">breakpoint</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token keyword">@include</span> <span class="token selector">animate </span><span class="token punctuation">{</span></div><div class="highlight-line">      <span class="token selector">0%, 100% </span><span class="token punctuation">{</span></div><div class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></div><div class="highlight-line">      <span class="token punctuation">}</span></div><div class="highlight-line">      <span class="token selector">50% </span><span class="token punctuation">{</span></div><div class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-100%<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">      <span class="token punctuation">}</span></div><div class="highlight-line">    <span class="token punctuation">}</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p>For one-off animations, this mixin keeps everything you need in the selector's normal partial and saves you the trouble of thinking up animation names!</p>
<h3>Reusable Animations</h3>
<p>On the other hand, some animations are reusable. If you've used Dan Eden's <a href="http://jds.li/animcss"><code>animate.css</code></a>, you've experienced a supply of animations designed to be reusable. If you want to see how Sass can organize something like that, checkout the <a href="http://jds.li/animsass"><code>animate.scss</code> project</a>.</p>
<h3>Animation Consistency</h3>
<p>You can also use Sass to solve CSS animation's speed problem. As you may know, you can only define 2 speed-related properties in CSS animations: duration (with the <code>animation-duration</code> property) and distance (in the <code>@keyframes</code> themselves). What you can't do is define an actual speed: pixels per second. But you can use Sass to calculate duration or distance based on a desired speed.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$default-speed</span></span><span class="token punctuation">:</span> 300px 1s<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token keyword">@function</span> <span class="token function">calc-distance</span><span class="token punctuation">(</span><span class="token variable">$duration</span>, <span class="token property"><span class="token variable">$speed</span></span><span class="token punctuation">:</span> <span class="token variable">$default-speed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@return</span> <span class="token variable">$duration</span> <span class="token operator">/</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$speed</span>, 2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$speed</span>, 1<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token keyword">@function</span> <span class="token function">calc-duration</span><span class="token punctuation">(</span><span class="token variable">$distance</span>, <span class="token property"><span class="token variable">$speed</span></span><span class="token punctuation">:</span> <span class="token variable">$default-speed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@return</span> <span class="token variable">$distance</span> <span class="token operator">/</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$speed</span>, 1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$speed</span>, 2<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p>This isn't purely responsive, but if you are aiming for consistent speed for your animation at various breakpoints, this saves you a lot of math.</p>
<p>The last way I've found Sass helpful for animations is for creating a style guide of consistent motion possibilities. You can set up a map of transition / animation distances and a map of transition / animation durations. (Or just one of those maps &amp; the functions from above!) Then, with a helper function, you can quickly get the right value for your current animation.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$transition-durations</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span></div><div class="highlight-line">  <span class="token property">short</span><span class="token punctuation">:</span> .16s,</div><div class="highlight-line">  <span class="token property">medium</span><span class="token punctuation">:</span> .26s,</div><div class="highlight-line">  <span class="token property">long</span><span class="token punctuation">:</span> .42s</div><div class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token property"><span class="token variable">$transition-distances</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span></div><div class="highlight-line">  <span class="token property">short</span><span class="token punctuation">:</span> .6rem,</div><div class="highlight-line">  <span class="token property">medium</span><span class="token punctuation">:</span> 2.6rem,</div><div class="highlight-line">  <span class="token property">long</span><span class="token punctuation">:</span> 6.8rem</div><div class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></div></code></pre>
<p>Here are the functions we can use to retrieve those values. I've written 1 function to house the validation and warning, and two alias functions to make it easier to use.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token keyword">@function</span> <span class="token function">get-transition-value</span><span class="token punctuation">(</span><span class="token variable">$map</span>, <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@if</span> <span class="token function">map-has-key</span><span class="token punctuation">(</span><span class="token variable">$map</span>, <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token keyword">@return</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$map</span>, <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">@else</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token keyword">@warn</span> <span class="token string">'Current $map does not contain key: #{$key}'</span><span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token keyword">@function</span> <span class="token function">duration</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@return</span> <span class="token function">get-transition-value</span><span class="token punctuation">(</span><span class="token variable">$transition-durations</span>, <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token keyword">@function</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@return</span> <span class="token function">get-transition-value</span><span class="token punctuation">(</span><span class="token variable">$transition-distances</span>, <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p>And here's what it looks like in use:</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token selector">.slow-element </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token function">duration</span><span class="token punctuation">(</span>long<span class="token punctuation">)</span> ease-in-out<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token selector"><span class="token parent important">&amp;</span>.moved </span><span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>short<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
</content>
  </entry>
  <entry>
    <title>Keeping RWD Simple & Sassy – Grids & Columns</title>
    <link href="https://jdsteinbach.com/sass/rwd-sass-grids/"/>
    <updated>2016-04-12T00:00:00-06:00</updated>
    <id>https://jdsteinbach.com/sass/rwd-sass-grids/</id>
    <content type="html"><p>This is the fourth post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some useful techniques for managing grid/column layouts with Sass.</p>
<h2>Grids and Columns</h2>
<p>Another big piece of responsive desig is grids. Well, columns. Always cracks me up at CSS/Sass &quot;grid systems&quot; that only create columns and become painfully complex when you try to use them for an actual &quot;grid.&quot; (Shout out to Susy for Sass with its <code>gallery()</code> mixin!) But I digress. We almost always have some kind of column-based layout that changes proportions. What's the best way to handle that?</p>
<p>Let's quickly nix a bad way to handle that: writing some Sass to generate every possible grid proportion for your project to a set of utility classes. Basically a Sass partial that makes your own &quot;Bootstrap&quot; class system.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token keyword">@for</span> <span class="token variable">$child-columns</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector">12 </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@for</span> <span class="token variable">$parent-columns</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector">12 </span><span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$parent-columns</span> >= <span class="token variable">$child-columns</span> </span><span class="token punctuation">{</span></div><div class="highlight-line">      <span class="token selector">.col-<span class="token variable">#{$child-columns}</span>-of-<span class="token variable">#{$parent-columns}</span> </span><span class="token punctuation">{</span></div><div class="highlight-line">        <span class="token property">width</span><span class="token punctuation">:</span> 100% <span class="token operator">/</span> <span class="token variable">$parent-columns</span> <span class="token operator">*</span> <span class="token variable">$child-columns</span><span class="token punctuation">;</span></div><div class="highlight-line">      <span class="token punctuation">}</span></div><div class="highlight-line">    <span class="token punctuation">}</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token selector">[class^="col-"] </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p>Those loops are really short and give us handy set of classes that are (almost) instantly ready to plug-in to our markup, but they also generate almost 80 selector blocks (300+ lines of unminified markup). And we haven't even added breakpoints, gutters, or offsets yet!</p>
<p>A much better solution is to use a set of mixins that create the right column widths and margins for you. This set of mixins should generate CSS based on grid math <em>only when their mixins are used.</em> This prevents the problem of making your users download the CSS needed for every possible grid position. It gives you all the benefits of highly configurable grids measurements, but only generates the CSS needed for the elements you actually want to style. All the possibilities, none of the bloat.</p>
<h3>Responsive Grids Sass Libraries</h3>
<p>There are 3 major Sass libraries that do nearly everything you need: Susy, Singularity, and Neat (with its Bourbon dependency).</p>
<p><strong>Neat (and Bourbon)</strong>: Neat is probably the most basic of the three. It does grid (with gutter) proportions and has a media query mixin. It's dependent on Bourbon (a mixin library). If you already use Bourbon, that makes Neat a natural choice, but if not, the dependency doesn't matter. <a href="http://jds.li/neat">Download Neat</a>.</p>
<p><strong>Susy</strong>: Susy's best bonus feature (in my opinion) is its <code>gallery()</code> mixin. Most grid systems just do columns, but <code>gallery()</code> lets you generate an actual grid (column <strong>and</strong> rows!) of items. It also has solid support for asymmetric grids (not all column proportions have to fit on a 12-col / 16-col / etc layout). <a href="http://jds.li/susy">Download Susy</a>.</p>
<p><strong>Singularity</strong>: Singularity supports asymmetric grids like Susy, but not a simple &quot;gallery&quot; mixin. It also has an add-on mixin that uses <code>calc()</code> to mix fluid and fixed width columns. <a href="http://jds.li/singularity">Download Singularity</a>.</p>
</content>
  </entry>
  <entry>
    <title>Keeping RWD Simple & Sassy – Responsive Typography</title>
    <link href="https://jdsteinbach.com/sass/rwd-sass-typography/"/>
    <updated>2016-04-08T00:00:00-06:00</updated>
    <id>https://jdsteinbach.com/sass/rwd-sass-typography/</id>
    <content type="html"><p>This is the third post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some useful techniques for managing responsive typography with Sass.</p>
<h2>Responsive Sass Typography</h2>
<p>You might recall our <code>$breakpoints</code> map from <a href="/sass/rwd-sass-media-queries/">the last post</a>. Let's combine that with 2 other maps to automate some responsive typography.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$breakpoints</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span></div><div class="highlight-line">  <span class="token property">default</span><span class="token punctuation">:</span> <span class="token null">null</span>,</div><div class="highlight-line">  <span class="token property">medium</span><span class="token punctuation">:</span> 25em,</div><div class="highlight-line">  <span class="token property">large</span><span class="token punctuation">:</span> 50em</div><div class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></div></code></pre>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$font-sizes</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span></div><div class="highlight-line">  <span class="token property">default</span><span class="token punctuation">:</span> 1rem,</div><div class="highlight-line">  <span class="token property">medium</span><span class="token punctuation">:</span>  1.2rem,</div><div class="highlight-line">  <span class="token property">large</span><span class="token punctuation">:</span>   1.4rem</div><div class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></div></code></pre>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$line-heights</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span></div><div class="highlight-line">  <span class="token property">default</span><span class="token punctuation">:</span> 1.5,</div><div class="highlight-line">  <span class="token property">medium</span><span class="token punctuation">:</span>  1.6,</div><div class="highlight-line">  <span class="token property">large</span><span class="token punctuation">:</span>   1.6</div><div class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></div></code></pre>
<p>Again, we'll use the function <code>map-get()</code> to retrieve values from these map.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$breakpoint-medium</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$breakpoints</span>, medium<span class="token punctuation">)</span><span class="token punctuation">;</span></div></code></pre>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$font-size-default</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$font-sizes</span>, default<span class="token punctuation">)</span><span class="token punctuation">;</span></div></code></pre>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$line-height-large</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$line-heights</span>, large<span class="token punctuation">)</span><span class="token punctuation">;</span></div></code></pre>
<p>I mentioned earlier we'd be able to loop through a map (an advantage over a series of variables). Here's a practical example. Let's create some quick responsive typography with the three maps we just made a moment ago. For each breakpoint (<code>default</code>, <code>medium</code>, <code>large</code>), we're going to set the base <code>font-size</code> &amp; <code>line-height</code> on the <code>body</code> element.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token selector">body </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$label</span>, <span class="token variable">$min-width</span> in <span class="token variable">$breakpoints</span> </span><span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span><span class="token variable">$label</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$font-sizes</span>, <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$line-heights</span>, <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">    <span class="token punctuation">}</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p>And now we get responsive base typography:</p>
<pre class="language-css"><code class="language-css"><div class="highlight-line"><span class="token selector">body</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 25em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token selector">body</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span></div><div class="highlight-line">    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 50em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token selector">body</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.4rem<span class="token punctuation">;</span></div><div class="highlight-line">    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<h2>Responsive Typography Sass Libraries</h2>
<ul>
<li>Modular Scale: <a href="http://jds.li/mscale">jds.li/mscale</a></li>
<li>TypeTuner: <a href="http://jds.li/typetuner">jds.li/typetuner</a></li>
<li>Sassline: <a href="http://jds.li/sassline">jds.li/sassline</a></li>
<li>Typi: <a href="http://jds.li/typi">jds.li/typi</a></li>
<li>Typographic: <a href="http://jds.li/typographic">jds.li/typographic</a></li>
</ul>
</content>
  </entry>
  <entry>
    <title>Keeping RWD Simple & Sassy – Media Queries</title>
    <link href="https://jdsteinbach.com/sass/rwd-sass-media-queries/"/>
    <updated>2016-04-08T00:00:00-06:00</updated>
    <id>https://jdsteinbach.com/sass/rwd-sass-media-queries/</id>
    <content type="html"><p>This is the second post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some useful techniques to manage media queries with Sass to keep your responsive Sass code base clean and maintainable.</p>
<h2>Media Query Variables</h2>
<p>I know, we're working with some bedrock basics: managing repeated values with variables. Assign any repeated value to a variable. The biggest improvements are: 1) you don't have to look up that value every time you want to use it again and 2) you can change that value across the entire codebase by editing the variable just once. This is a practical way to apply the programming principle of having a &quot;single source of truth&quot; for these values.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$breakpoint-medium</span></span><span class="token punctuation">:</span> 25em<span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$breakpoint-large</span></span><span class="token punctuation">:</span>  50em<span class="token punctuation">;</span></div></code></pre>
<p>Now if you want to write a media query in Sass, you can stick with your defined breakpoints like this:</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token selector">.element </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token variable">$breakpoint-medium</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p>Let's improve that a bit, shall we? Sass variables aren't limited to simple string storage: they can also be maps (or associative arrays):</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$breakpoints</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span></div><div class="highlight-line">  <span class="token property">default</span><span class="token punctuation">:</span> <span class="token null">null</span>,</div><div class="highlight-line">  <span class="token property">medium</span><span class="token punctuation">:</span> 25em,</div><div class="highlight-line">  <span class="token property">large</span><span class="token punctuation">:</span> 50em</div><div class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></div></code></pre>
<p>Or if you've put your breakpoints in a map, you'll use <code>map-get()</code> to retreive the value for that breakpoint. This is the Sass equivalent of <code>array['key']</code> / <code>array.key</code> in JS or <code>$array['key']</code>in PHP:</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token selector">.element </span><span class="token punctuation">{</span></div><div class="highlight-line">  @media screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$breakpoints</span>, medium<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<h3>Media Query Mixin</h3>
<p>Now, that's still a lot to type, so let's create a mixin to make the whole MQ syntax fast and reusable:</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token keyword">@mixin</span> <span class="token function">media-query</span><span class="token punctuation">(</span><span class="token variable">$label</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property"><span class="token variable">$min-width</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$breakpoints</span>, <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$min-width</span> </span><span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token variable">$min-width</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></div><div class="highlight-line">      <span class="token keyword">@content</span><span class="token punctuation">;</span></div><div class="highlight-line">    <span class="token punctuation">}</span></div><div class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">@else</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token keyword">@content</span><span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token selector">.element </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p><em>Note: That mixin will fail silently. If you pass it a key that doesn't exist in <code>$breakpoints</code>, it'll just output the <code>@content</code> CSS with no media query. Read <a href="http://jds.li/validsass">my article on Sass validation</a> for more information on validating input for Sass mixins &amp; functions.</em></p>
<h3>Breakpoints vs. Tweakpoints</h3>
<p>You may have seen <a href="http://jds.li/tweakpoints">Jeremy Keith's article on &quot;Tweakpoints&quot; recently</a>. Tweakpoints are like breakpoints for a design, but not as &quot;major.&quot; You're probably already used to having 3 or 4 major layout-changing breakpoints for a site. You've probably also felt the pain of having a few odd components that don't seem to &quot;break&quot; nicely at your primary breakpoints. Tweakpoints are &quot;sub-breakpoints&quot; for individual parts of the site that need a slightly-adjusted breakpoint.</p>
<p>You can handle tweakpoints a couple different ways. You could be strict and say, &quot;They're not as important as breakpoints, so they'll be stored in their own map.&quot; In that scenario, you'll then need to either (a) write a <code>tweakpoint()</code> version of the breakpoint mixin, or (b) modify your breakpoint mixin so that it can handle tweakpoints too. If you like option (b), read <a href="http://jds.li/tpointsass">this tweakpoint Sass tutorial</a> for an example of how to scope tweakpoints to each Sass partial.</p>
<p>The other way to handle tweakpoints is to decide, &quot;I don't care that they're not as important as breakpoints. I'll put them in the same map anyway and that's fine.&quot; The downside of this approach is that all the tweakpoints are available to the entire codebase, instead of being scoped to the style patterns that actually need them.</p>
<p>Here's my way to mess with the breakpoint mixin and get it to handle tweakpoints nicely.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token keyword">@mixin</span> <span class="token function">media-query</span><span class="token punctuation">(</span><span class="token variable">$label</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property"><span class="token variable">$min-width</span></span><span class="token punctuation">:</span> <span class="token variable">$label</span><span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@if</span> <span class="token function">type-of</span><span class="token punctuation">(</span><span class="token variable">$label</span><span class="token punctuation">)</span> <span class="token selector">= string </span><span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property"><span class="token variable">$min-width</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$breakpoints</span>, <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$min-width</span> </span><span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token variable">$min-width</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></div><div class="highlight-line">      <span class="token keyword">@content</span><span class="token punctuation">;</span></div><div class="highlight-line">    <span class="token punctuation">}</span></div><div class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">@else</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token keyword">@content</span><span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$tweakpoint-element</span></span><span class="token punctuation">:</span> 45em<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token selector">.element </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span><span class="token variable">$tweakpoint-element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<h3>Per-Partial Variables for Breakpoints</h3>
<p>I often find myself in a situation where I've got a Sass partial that re-uses a breakpoint in several element. Navigation is a pretty common place for this to happen. I don't always know up front if I'll need to change the nav at the medium breakpoint, the large breakpoint, or a tweakpoint somewhere in between. I do know that when I figure out where to break that point, I'll need to update the argument in 4-5 instances of the media query mixin. I handle that with a variable in that partial pointing to the breakpoint I want to test.</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token property"><span class="token variable">$mq-nav</span></span><span class="token punctuation">:</span> medium<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token selector">.site-nav </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span><span class="token variable">$mq-nav</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token selector">.site-nav-item </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span><span class="token variable">$mq-nav</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token selector">.site-nav-link </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1em .5em<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span><span class="token variable">$mq-nav</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token property">padding</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p>In real life, the partial is never that simple: it's got all kinds of other style information scattered around and it ends up 100 or more lines long. This alias variable allows me to link all the styles that should happen at a single breakpoint and edit that breakpoint easily.</p>
<h3>Nested Media Queries vs. MQ Partials</h3>
<p>This may be an old topic that doesn't need to be re-hashed here, but it's RWD and Sass, so I think it deserves a slide or two.</p>
<p>Should you nest all your media queries inside the selectors they modify, or have a partial per media query with all the modifications in each partial?</p>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token comment">// in _nav partial</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token selector">.site-nav </span><span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token comment">// styles</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token comment">// medium styles</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line">  <span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">    <span class="token comment">// large styles</span></div><div class="highlight-line">  <span class="token punctuation">}</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token comment">// in styles partial</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token keyword">@import</span> <span class="token string">'site-nav'</span><span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@import</span> <span class="token string">'bp-medium'</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token punctuation">}</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token keyword">@include</span> <span class="token function">media-query</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span> <span class="token punctuation">{</span></div><div class="highlight-line">  <span class="token keyword">@import</span> <span class="token string">'bp-large'</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token punctuation">}</span></div></code></pre>
<p>Option 2 reminds us of the olden days when we wrote all our styles in a single CSS file, and put our media queries in order at the bottom of that file. If you remember those days, you probably remember the major frustration of that: to modify one component responsively, you had to keep scrolling between 3 positions in your 1000s of lines CSS file. There's no reason to keep that frustration when you're using a preprocessory.</p>
<p>Nesting all your media queries in the selectors they modify allows you to (ideally) open 1 partial to find and maintain all the styles for a single component. When it comes to dev-friendly organization like we talked about before, nesting media queries is the way to go.</p>
<p>The objection to that technique, however, is that it will bloat CSS output by repeating the media query syntax over and over again. However, that objection ignores an important factor: if you don't repeat media queries, you'll repeat your selectors.</p>
<p>I ran a brief test to see how bad the &quot;bloat&quot; is. For the test, I generated 40 selectors (of varying length) and nested 2 media queries in each one. Then I wrote default styles &amp; 2 media queries with the 40 selectors repeated in each media query. The nested media query output was a bit larger: 11.3kb, while the separated media query output was 8.3kb - 25% smaller. (<em>Remember, this is not an entire stylesheet: it's a simplified test to show how much weight the selectors &amp; queries themselves generate. Also, this is not a huge issue: if your total style sheet is ~150kb, it's only a 2% change.</em>) Then I gzipped both output files. Surprisingly, the nested media query gzip was 87% smaller than the separated media query gzip.</p>
<p>So first of all, the repetitious bloat warning is exaggerated: you're going to have repetition no matter what you do. Secondly, however, you really <strong>must</strong> be gzipping your HTML/CSS/JS for users. Gzip compression finds all the repeated strings in a text file and uses an alias to shorten them. And for the record, you get better compression with 2 strings repeated 40x than with 40 strings repeated 2x. Nested media queries FTW!</p>
<p><em>Note: <a href="http://jds.li/gzip">more information on gzip</a>.</em></p>
</content>
  </entry>
  <entry>
    <title>Keeping RWD Simple & Sassy – Organization</title>
    <link href="https://jdsteinbach.com/sass/rwd-sass-organization/"/>
    <updated>2016-03-30T00:00:00-06:00</updated>
    <id>https://jdsteinbach.com/sass/rwd-sass-organization/</id>
    <content type="html"><p>This is the first post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some important programming principles for keeping any code organized and makes application to your responsive Sass code base.</p>
<h2>Single Source of Truth</h2>
<p>There's a principle in data organization and programming called &quot;Single Source of Truth.&quot; It means that ideally, a system should only define a piece of data once, then all other references to that data should refer back to the original/canonical definition. While this principle originally described data structures and databases primarily, it does apply to style organization. For example, if you use a specific shade of blue throughout a site, it's best to define that color once (as a variable) and use the variable throughout the rest of your style codebase. You may have heard this same principle explained with the acronym &quot;DRY&quot; - Don't Repeat Yourself.</p>
<p>One clarification on SSoT: this principle does not mean that you never ever type the same value or string twice. This principle applies to data that's repeated &quot;because it's meant to be the same.&quot; However, sometimes data points are identical but not on purpose. The height of a site's fixed header might be <code>80px</code> (or <code>5rem</code> if you like that better) and the page title font-size may be the same size. However, that's not necessarily because they <strong>must</strong> be the same size. SSOT/DRY doesn't mean you have to force identical values into a single variable.</p>
<h2>Naming Things Well</h2>
<p>The key to maintainability is consistency. If you need to find and change some code quickly, things have to be named consistently. Let me suggest a naming pattern that'll help with consistency: the words in your variable and file names should go from broad to narrow.</p>
<h3>Name Things Consistently</h3>
<h4>Naming Variables</h4>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token comment">// Avoid this:</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$blue-color</span></span><span class="token punctuation">:</span>      #0074D9<span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$dark-blue-color</span></span><span class="token punctuation">:</span> #001f3f<span class="token punctuation">;</span> <span class="token comment">// eeny</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$blue-dark-color</span></span><span class="token punctuation">:</span> #001f3f<span class="token punctuation">;</span> <span class="token comment">// meeny</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$blue-color-dark</span></span><span class="token punctuation">:</span> #001f3f<span class="token punctuation">;</span> <span class="token comment">// miney mo</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$red-color</span></span><span class="token punctuation">:</span>       #ff4136<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token comment">// Do this:</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$color-blue</span></span><span class="token punctuation">:</span>      #0074D9<span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$color-blue-dark</span></span><span class="token punctuation">:</span> #001f3f<span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$color-red</span></span><span class="token punctuation">:</span>       #ff4136<span class="token punctuation">;</span></div></code></pre>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token comment">// Avoid this:</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$normal-border</span></span><span class="token punctuation">:</span> 1px solid <span class="token variable">$color-gray-light</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$fancy-border</span></span><span class="token punctuation">:</span>  1px solid <span class="token variable">$color-blue</span><span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token comment">// Do this:</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$border-normal</span></span><span class="token punctuation">:</span> 1px solid <span class="token variable">$color-gray-light</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$border-fancy</span></span><span class="token punctuation">:</span>  1px solid <span class="token variable">$color-blue</span><span class="token punctuation">;</span></div></code></pre>
<h4>Naming Files</h4>
<pre><code>// Cluttered
|–  modules/
|   |–  _block-table.scss
|   |–  _siteheader.scss
|   |–  _4column-block.scss
|   |–  _footer.scss
|   |–  _menus.scss
|   `–  _mobile-nav.scss
|–  reset/
|   `–  _reset.scss
`–  style.scss

// Better
|–  blocks/
|   |–  _block-table.scss
|   `–  _block-columns-4.scss
|–  shared/
|   |–  _site-header.scss
|   |–  _site-footer.scss
|   |–  _nav.scss
|   `–  _nav-mobile.scss
|–  reset/
|   `–  _reset.scss
`–  style.scss
</code></pre>
<h3>Name Things Clearly</h3>
<p>Things have to be named clearly as well. You'll often seen developers using all manner of abbreviations for their variables and files. Shorter names might be quicker to type as you create a new codebase, but they're a lot less useful when you need to understand the existing code for a maintenance request later. We often spend a month or two building a site, then a year or more maintaining it. Don't make the long-term maintenance hard for the sake of typing fewer characters while you build the site.</p>
<h4>Naming Variables</h4>
<pre class="language-scss"><code class="language-scss"><div class="highlight-line"><span class="token comment">// Harder to read / maintain</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$c-bl-dk</span></span><span class="token punctuation">:</span> #001f3f<span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$c-rd-lt</span></span><span class="token punctuation">:</span> <span class="token function">lighten</span><span class="token punctuation">(</span>#ff4136, 25%<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$c-gr</span></span><span class="token punctuation">:</span>    #3d9970<span class="token punctuation">;</span></div><div class="highlight-line"></div><div class="highlight-line"><span class="token comment">// Easier to read / maintain</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$color-blue-dark</span></span><span class="token punctuation">:</span> #001f3f<span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$color-red-light</span></span><span class="token punctuation">:</span> <span class="token function">lighten</span><span class="token punctuation">(</span>#FF4136, 25%<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="highlight-line"><span class="token property"><span class="token variable">$color-green</span></span><span class="token punctuation">:</span>     #3D9970<span class="token punctuation">;</span></div></code></pre>
<h4>Naming Files</h4>
<pre><code>// Mysterious
|–  modules/
|   |–  _b-table.scss
|   |–  _s-header.scss
|   |–  _4c-b.scss
|   |–  _ft.scss
|   |–  _m.scss
|   `–  _mob-nav.scss
|–  reset/
|   `– _reset.scss
`–  style.scss

// Clearer
|–  blocks/
|   |–  _block-table.scss
|   |–  _block-columns-4.scss
|–  shared/
|   |–  _site-header.scss
|   |–  _site-footer.scss
|   |–  _nav.scss
|   `–  _nav-mobile.scss
|–  reset/
|   `– _reset.scss
`–  style.scss
</code></pre>
<h2>Making Big Things Small</h2>
<p>Using a preprocessor means you no longer need to deal with 1000s of lines of CSS in a single file. (You'll still compile everything to a single CSS file, but you won't have to maintain directly.)</p>
<p>Let's talk about how to organize your preprocessor partials. Credit for this pattern goes to Hugo Giraudel's <a href="http://sass-guidelin.es/#the-7-1-pattern">Sass Guidelines site</a>.</p>
<pre><code>// 7-1 Sass Folder Pattern
sass/
|–  abstracts/
|–  base/
|–  components/
|–  layout/
|–  pages/
|–  themes/
|–  vendors/
`–  main.scss
</code></pre>
<pre><code>sass/
|–  abstracts/
|   |–  _variables.scss    # Sass Variables
|   |–  _functions.scss    # Sass Functions
|   |–  _mixins.scss       # Sass Mixins
|   `–  _placeholders.scss # Sass Placeholders
|
|–  base/
|   |–  _reset.scss        # Reset/normalize
|   |–  _typography.scss   # Typography rules
|   …                      # Etc.
|
|–  components/
|   |–  _buttons.scss      # Buttons
|   |–  _carousel.scss     # Carousel
|   |–  _cover.scss        # Cover
|   |–  _dropdown.scss     # Dropdown
|   …                      # Etc.
|
|–  layout/
|   |–  _navigation.scss   # Navigation
|   |–  _grid.scss         # Grid system
|   |–  _header.scss       # Header
|   |–  _footer.scss       # Footer
|   |–  _sidebar.scss      # Sidebar
|   |–  _forms.scss        # Forms
|   …                      # Etc.
|
|–  pages/
|   |–  _home.scss         # Home specific styles
|   |–  _contact.scss      # Contact specific styles
|   …                      # Etc.
|
|–  themes/
|   |–  _theme.scss        # Default theme
|   |–  _admin.scss        # Admin theme
|   …                      # Etc.
|
|–  vendors/
|   |–  _bootstrap.scss    # Bootstrap
|   |–  _jquery-ui.scss    # jQuery UI
|   …                      # Etc.
|
`–  main.scss              # Main Sass file
</code></pre>
<ul>
<li><strong>Abstracts:</strong> variables, mixins, functions, placeholders</li>
<li><strong>Vendors:</strong> code libraries from other sources like grid helpers, mixin libraries, etc</li>
<li><strong>Base:</strong> boilerplate stuff like reset, typography</li>
<li><strong>Layouts:</strong> macro (wireframe) page parts like header, footer, grid</li>
<li><strong>Components:</strong> smaller, reusable components like widgets, media, thumbnails</li>
<li><strong>Pages:</strong> page-specific styles</li>
<li><strong>Themes:</strong> specific theme variations (not common on small/medium sites)</li>
</ul>
</content>
  </entry>
  <entry>
    <title>Keeping RWD Simple & Sassy</title>
    <link href="https://jdsteinbach.com/sass/rwd-sass/"/>
    <updated>2016-03-29T00:00:00-06:00</updated>
    <id>https://jdsteinbach.com/sass/rwd-sass/</id>
    <content type="html"><p>There's no going back now: responsive web design is the new normal. Content parity across devices is the best way to serve our users and all of us who build the web build with for multiple screen sizes.</p>
<p>Responsive design comes with a lot of complications, however: managing consistent breakpoints across a project, tracking all the styles that need to change across those breakpoints, and keeping all the responsive code clean and organized, to name a few.</p>
<p>Using Sass (or a similar preprocessor), we can standardize our breakpoints, automate much of the repetitive code, and organize individual styles well. Over the next several posts, we’ll look at several Sass techniques and tools for managing responsive CSS.</p>
<p><em>Note: I'm a big fan of Sass, but I know some of you use Less or Stylus (or your own home-brewed or PostCSS-based preprocessor), so I'm going to emphasize techniques over specific tools.</em></p>
<h2>Outline:</h2>
<ol>
<li><a href="/sass/rwd-sass-organization/">Organization</a></li>
</ol>
<ul>
<li>Single Source of Truth</li>
<li>Name Things Well</li>
<li>Make Big Things Small</li>
</ul>
<ol start="2">
<li>Responsive Sass Techniques</li>
</ol>
<ul>
<li><a href="/sass/rwd-sass-media-queries">Media Queries</a></li>
<li><a href="/sass/rwd-sass-typography">Typography</a></li>
<li><a href="/sass/rwd-sass-grids">Grids</a></li>
<li><a href="/sass/rwd-sass-animation">Animation</a></li>
</ul>
<p>Links to individual posts are in the outline above. Enjoy!</p>
</content>
  </entry>
  <entry>
    <title>Setting Up Let’s Encrypt with VestaCP on Digital Ocean</title>
    <link href="https://jdsteinbach.com/misc/letsencrypt-vesta/"/>
    <updated>2016-03-07T00:00:00-07:00</updated>
    <id>https://jdsteinbach.com/misc/letsencrypt-vesta/</id>
    <content type="html"><p>Ok, I’ll be totally honest here. I’m writing this post mostly for myself: I need an easy place to keep these instructions for setting up new SSL certificates. If they help you, that’s awesome. If not, hopefully there’s <a href="https://jdsteinbach.com">another post here</a> that you can learn from.</p>
<h2>Installing Let’s Encrypt</h2>
<p>First step: install the Let’s Encrypt tool on your server. SSH into your server, <code>cd</code> to the root dir (where you probably landed as soon as you SSHed in), and run the these commands:</p>
<pre class="language-bash"><code class="language-bash"><div class="highlight-line"><span class="token function">git</span> clone https://github.com/letsencrypt/letsencrypt</div><div class="highlight-line"><span class="token function">cd</span> letsencrypt</div><div class="highlight-line">./letsencrypt-auto --help</div></code></pre>
<p>This will take time to install a bunch of packages, then give you a success message. You should only does these steps once. Every time you want to secure another domain on your VestaCP account, follow the next section.</p>
<h2>Adding Let’s Encrypt Certificates</h2>
<p>In all of these commands, replace <code>DOMAIN_GOES_HERE</code> with the domain you want to secure and <code>YOUR_VESTA_USERNAME</code> with your VestaCP username.</p>
<h3>Installing the Certificate</h3>
<p>The following command will create the necessary certificates. You should still be in the <code>/letsencrypt/</code> directory where you ran the last command above. When you run this command, the UI will ask you for an email address to use for this certificate and to agree to the Terms of Service.</p>
<pre class="language-shell"><code class="language-shell"><div class="highlight-line">./letsencrypt-auto certonly -a webroot --renew-by-default --webroot-path /home/YOUR_VESTA_USERNAME/web/DOMAIN_GOES_HERE/public_html -d DOMAIN_GOES_HERE</div></code></pre>
<p>That command created several files in on your server. You’ll need to copy the contents of those files to your VestaCP admin page for that domain. In Vesta, edit the domain, check the button for &quot;SSL Support&quot; – you’ll then see three new fields.</p>
<h3>Copying Cert Files to VestaCP</h3>
<p>To view those files' contents, run the following commands, then copy the file contents to the appropriate field:</p>
<pre class="language-shell"><code class="language-shell"><div class="highlight-line"><span class="token function">cat</span> /etc/letsencrypt/live/DOMAIN_GOES_HERE/cert.pem</div></code></pre>
<p>^ Copy contents into “SSL Certificate” field.</p>
<pre class="language-shell"><code class="language-shell"><div class="highlight-line"><span class="token function">cat</span> /etc/letsencrypt/live/DOMAIN_GOES_HERE/privkey.pem</div></code></pre>
<p>^ Copy contents into “SSL Key” field.</p>
<pre class="language-shell"><code class="language-shell"><div class="highlight-line"><span class="token function">cat</span> /etc/letsencrypt/live/DOMAIN_GOES_HERE/chain.pem</div></code></pre>
<p>^ Copy contents into “SSL Certificate Authority” field.</p>
<h3>Symlinks to the Original Files</h3>
<p>The previous steps saved those details to a series of files in <code>/home/USERNAME/conf/web/</code> you’ll actually remove all those files next:</p>
<pre class="language-shell"><code class="language-shell"><div class="highlight-line"><span class="token function">rm</span> /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.*</div></code></pre>
<p>In place of those files you just deleted, you’ll now create a series of symlinks to the originals created by Let’s Encrypt:</p>
<pre class="language-shell"><code class="language-shell"><div class="highlight-line"><span class="token function">ln</span> -s /etc/letsencrypt/live/DOMAIN_GOES_HERE/fullchain.pem /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.pem</div><div class="highlight-line"><span class="token function">ln</span> -s /etc/letsencrypt/live/DOMAIN_GOES_HERE/privkey.pem /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.key</div><div class="highlight-line"><span class="token function">ln</span> -s /etc/letsencrypt/live/DOMAIN_GOES_HERE/cert.pem /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.crt</div><div class="highlight-line"><span class="token function">ln</span> -s /etc/letsencrypt/live/DOMAIN_GOES_HERE/chain.pem /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.ca</div></code></pre>
<p>Once this is done, restart your nginx and Apache servers:</p>
<pre class="language-shell"><code class="language-shell"><div class="highlight-line"><span class="token function">service</span> nginx restart</div><div class="highlight-line"><span class="token function">service</span> apache2 restart</div></code></pre>
<p>Check out your domain now, and it should be secure!</p>
</content>
  </entry>
</feed>
